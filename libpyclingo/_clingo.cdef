typedef int32_t clingo_literal_t;
typedef uint32_t clingo_atom_t;
typedef uint32_t clingo_id_t;
typedef int32_t clingo_weight_t;
typedef struct clingo_weighted_literal {
clingo_literal_t literal;
clingo_weight_t weight;
} clingo_weighted_literal_t;
enum clingo_error_e {
clingo_error_success   = 0, //!< successful API calls
clingo_error_runtime   = 1, //!< errors only detectable at runtime like invalid input
clingo_error_logic     = 2, //!< wrong usage of the clingo API
clingo_error_bad_alloc = 3, //!< memory could not be allocated
clingo_error_unknown   = 4  //!< errors unrelated to clingo
};
typedef int clingo_error_t;
char const *clingo_error_string(clingo_error_t code);
clingo_error_t clingo_error_code();
char const *clingo_error_message();
void clingo_set_error(clingo_error_t code, char const *message);
enum clingo_warning_e {
clingo_warning_operation_undefined = 0, //!< undefined arithmetic operation or weight of aggregate
clingo_warning_runtime_error       = 1, //!< to report multiple errors; a corresponding runtime error is raised later
clingo_warning_atom_undefined      = 2, //!< undefined atom in program
clingo_warning_file_included       = 3, //!< same file included multiple times
clingo_warning_variable_unbounded  = 4, //!< CSP variable with unbounded domain
clingo_warning_global_variable     = 5, //!< global variable in tuple of aggregate element
clingo_warning_other               = 6, //!< other kinds of warnings
};
typedef int clingo_warning_t;
char const *clingo_warning_string(clingo_warning_t code);
typedef void (*clingo_logger_t)(clingo_warning_t code, char const *message, void *data);
void clingo_version(int *major, int *minor, int *revision);
enum clingo_truth_value_e {
clingo_truth_value_free  = 0, //!< no truth value
clingo_truth_value_true  = 1, //!< true
clingo_truth_value_false = 2  //!< false
};
typedef int clingo_truth_value_t;
typedef struct clingo_location {
char const *begin_file; //!< the file where the location begins
char const *end_file;   //!< the file where the location ends
size_t begin_line;      //!< the line where the location begins
size_t end_line;        //!< the line where the location ends
size_t begin_column;    //!< the column where the location begins
size_t end_column;      //!< the column where the location ends
} clingo_location_t;
typedef uint64_t clingo_signature_t;
bool clingo_signature_create(char const *name, uint32_t arity, bool positive, clingo_signature_t *signature);
char const *clingo_signature_name(clingo_signature_t signature);
uint32_t clingo_signature_arity(clingo_signature_t signature);
bool clingo_signature_is_positive(clingo_signature_t signature);
bool clingo_signature_is_negative(clingo_signature_t signature);
bool clingo_signature_is_equal_to(clingo_signature_t a, clingo_signature_t b);
bool clingo_signature_is_less_than(clingo_signature_t a, clingo_signature_t b);
size_t clingo_signature_hash(clingo_signature_t signature);
enum clingo_symbol_type_e {
clingo_symbol_type_infimum  = 0, //!< the <tt>\#inf</tt> symbol
clingo_symbol_type_number   = 1, //!< a numeric symbol, e.g., `1`
clingo_symbol_type_string   = 4, //!< a string symbol, e.g., `"a"`
clingo_symbol_type_function = 5, //!< a numeric symbol, e.g., `c`, `(1, "a")`, or `f(1,"a")`
clingo_symbol_type_supremum = 7  //!< the <tt>\#sup</tt> symbol
};
typedef int clingo_symbol_type_t;
typedef uint64_t clingo_symbol_t;
void clingo_symbol_create_number(int number, clingo_symbol_t *symbol);
void clingo_symbol_create_supremum(clingo_symbol_t *symbol);
void clingo_symbol_create_infimum(clingo_symbol_t *symbol);
bool clingo_symbol_create_string(char const *string, clingo_symbol_t *symbol);
bool clingo_symbol_create_id(char const *name, bool positive, clingo_symbol_t *symbol);
bool clingo_symbol_create_function(char const *name, clingo_symbol_t const *arguments, size_t arguments_size, bool positive, clingo_symbol_t *symbol);
bool clingo_symbol_number(clingo_symbol_t symbol, int *number);
bool clingo_symbol_name(clingo_symbol_t symbol, char const **name);
bool clingo_symbol_string(clingo_symbol_t symbol, char const **string);
bool clingo_symbol_is_positive(clingo_symbol_t symbol, bool *positive);
bool clingo_symbol_is_negative(clingo_symbol_t symbol, bool *negative);
bool clingo_symbol_arguments(clingo_symbol_t symbol, clingo_symbol_t const **arguments, size_t *arguments_size);
clingo_symbol_type_t clingo_symbol_type(clingo_symbol_t symbol);
bool clingo_symbol_to_string_size(clingo_symbol_t symbol, size_t *size);
bool clingo_symbol_to_string(clingo_symbol_t symbol, char *string, size_t size);
bool clingo_symbol_is_equal_to(clingo_symbol_t a, clingo_symbol_t b);
bool clingo_symbol_is_less_than(clingo_symbol_t a, clingo_symbol_t b);
size_t clingo_symbol_hash(clingo_symbol_t symbol);
bool clingo_add_string(char const *string, char const **result);
bool clingo_parse_term(char const *string, clingo_logger_t logger, void *logger_data, unsigned message_limit, clingo_symbol_t *symbol);
typedef struct clingo_symbolic_atoms clingo_symbolic_atoms_t;
typedef uint64_t clingo_symbolic_atom_iterator_t;
bool clingo_symbolic_atoms_size(clingo_symbolic_atoms_t const *atoms, size_t *size);
bool clingo_symbolic_atoms_begin(clingo_symbolic_atoms_t const *atoms, clingo_signature_t const *signature, clingo_symbolic_atom_iterator_t *iterator);
bool clingo_symbolic_atoms_end(clingo_symbolic_atoms_t const *atoms, clingo_symbolic_atom_iterator_t *iterator);
bool clingo_symbolic_atoms_find(clingo_symbolic_atoms_t const *atoms, clingo_symbol_t symbol, clingo_symbolic_atom_iterator_t *iterator);
bool clingo_symbolic_atoms_iterator_is_equal_to(clingo_symbolic_atoms_t const *atoms, clingo_symbolic_atom_iterator_t a, clingo_symbolic_atom_iterator_t b, bool *equal);
bool clingo_symbolic_atoms_symbol(clingo_symbolic_atoms_t const *atoms, clingo_symbolic_atom_iterator_t iterator, clingo_symbol_t *symbol);
bool clingo_symbolic_atoms_is_fact(clingo_symbolic_atoms_t const *atoms, clingo_symbolic_atom_iterator_t iterator, bool *fact);
bool clingo_symbolic_atoms_is_external(clingo_symbolic_atoms_t const *atoms, clingo_symbolic_atom_iterator_t iterator, bool *external);
bool clingo_symbolic_atoms_literal(clingo_symbolic_atoms_t const *atoms, clingo_symbolic_atom_iterator_t iterator, clingo_literal_t *literal);
bool clingo_symbolic_atoms_signatures_size(clingo_symbolic_atoms_t const *atoms, size_t *size);
bool clingo_symbolic_atoms_signatures(clingo_symbolic_atoms_t const *atoms, clingo_signature_t *signatures, size_t size);
bool clingo_symbolic_atoms_next(clingo_symbolic_atoms_t const *atoms, clingo_symbolic_atom_iterator_t iterator, clingo_symbolic_atom_iterator_t *next);
bool clingo_symbolic_atoms_is_valid(clingo_symbolic_atoms_t const *atoms, clingo_symbolic_atom_iterator_t iterator, bool *valid);
typedef bool (*clingo_symbol_callback_t) (clingo_symbol_t const *symbols, size_t symbols_size, void *data);
enum clingo_theory_term_type_e {
clingo_theory_term_type_tuple    = 0, //!< a tuple term, e.g., `(1,2,3)`
clingo_theory_term_type_list     = 1, //!< a list term, e.g., `[1,2,3]`
clingo_theory_term_type_set      = 2, //!< a set term, e.g., `{1,2,3}`
clingo_theory_term_type_function = 3, //!< a function term, e.g., `f(1,2,3)`
clingo_theory_term_type_number   = 4, //!< a number term, e.g., `42`
clingo_theory_term_type_symbol   = 5  //!< a symbol term, e.g., `c`
};
typedef int clingo_theory_term_type_t;
typedef struct clingo_theory_atoms clingo_theory_atoms_t;
bool clingo_theory_atoms_term_type(clingo_theory_atoms_t const *atoms, clingo_id_t term, clingo_theory_term_type_t *type);
bool clingo_theory_atoms_term_number(clingo_theory_atoms_t const *atoms, clingo_id_t term, int *number);
bool clingo_theory_atoms_term_name(clingo_theory_atoms_t const *atoms, clingo_id_t term, char const **name);
bool clingo_theory_atoms_term_arguments(clingo_theory_atoms_t const *atoms, clingo_id_t term, clingo_id_t const **arguments, size_t *size);
bool clingo_theory_atoms_term_to_string_size(clingo_theory_atoms_t const *atoms, clingo_id_t term, size_t *size);
bool clingo_theory_atoms_term_to_string(clingo_theory_atoms_t const *atoms, clingo_id_t term, char *string, size_t size);
bool clingo_theory_atoms_element_tuple(clingo_theory_atoms_t const *atoms, clingo_id_t element, clingo_id_t const **tuple, size_t *size);
bool clingo_theory_atoms_element_condition(clingo_theory_atoms_t const *atoms, clingo_id_t element, clingo_literal_t const **condition, size_t *size);
bool clingo_theory_atoms_element_condition_id(clingo_theory_atoms_t const *atoms, clingo_id_t element, clingo_literal_t *condition);
bool clingo_theory_atoms_element_to_string_size(clingo_theory_atoms_t const *atoms, clingo_id_t element, size_t *size);
bool clingo_theory_atoms_element_to_string(clingo_theory_atoms_t const *atoms, clingo_id_t element, char *string, size_t size);
bool clingo_theory_atoms_size(clingo_theory_atoms_t const *atoms, size_t *size);
bool clingo_theory_atoms_atom_term(clingo_theory_atoms_t const *atoms, clingo_id_t atom, clingo_id_t *term);
bool clingo_theory_atoms_atom_elements(clingo_theory_atoms_t const *atoms, clingo_id_t atom, clingo_id_t const **elements, size_t *size);
bool clingo_theory_atoms_atom_has_guard(clingo_theory_atoms_t const *atoms, clingo_id_t atom, bool *has_guard);
bool clingo_theory_atoms_atom_guard(clingo_theory_atoms_t const *atoms, clingo_id_t atom, char const **connective, clingo_id_t *term);
bool clingo_theory_atoms_atom_literal(clingo_theory_atoms_t const *atoms, clingo_id_t atom, clingo_literal_t *literal);
bool clingo_theory_atoms_atom_to_string_size(clingo_theory_atoms_t const *atoms, clingo_id_t atom, size_t *size);
bool clingo_theory_atoms_atom_to_string(clingo_theory_atoms_t const *atoms, clingo_id_t atom, char *string, size_t size);
typedef struct clingo_assignment clingo_assignment_t;
uint32_t clingo_assignment_decision_level(clingo_assignment_t const *assignment);
uint32_t clingo_assignment_root_level(clingo_assignment_t const *assignment);
bool clingo_assignment_has_conflict(clingo_assignment_t const *assignment);
bool clingo_assignment_has_literal(clingo_assignment_t const *assignment, clingo_literal_t literal);
bool clingo_assignment_level(clingo_assignment_t const *assignment, clingo_literal_t literal, uint32_t *level);
bool clingo_assignment_decision(clingo_assignment_t const *assignment, uint32_t level, clingo_literal_t *literal);
bool clingo_assignment_is_fixed(clingo_assignment_t const *assignment, clingo_literal_t literal, bool *is_fixed);
bool clingo_assignment_is_true(clingo_assignment_t const *assignment, clingo_literal_t literal, bool *is_true);
bool clingo_assignment_is_false(clingo_assignment_t const *assignment, clingo_literal_t literal, bool *is_false);
bool clingo_assignment_truth_value(clingo_assignment_t const *assignment, clingo_literal_t literal, clingo_truth_value_t *value);
size_t clingo_assignment_size(clingo_assignment_t const *assignment);
bool clingo_assignment_at(clingo_assignment_t const *assignment, size_t offset, clingo_literal_t *literal);
bool clingo_assignment_is_total(clingo_assignment_t const *assignment);
bool clingo_assignment_trail_size(clingo_assignment_t const *assignment, uint32_t *size);
bool clingo_assignment_trail_begin(clingo_assignment_t const *assignment, uint32_t level, uint32_t *offset);
bool clingo_assignment_trail_end(clingo_assignment_t const *assignment, uint32_t level, uint32_t *offset);
bool clingo_assignment_trail_at(clingo_assignment_t const *assignment, uint32_t offset, clingo_literal_t *literal);
enum clingo_propagator_check_mode_e {
clingo_propagator_check_mode_none     = 0, //!< do not call @ref ::clingo_propagator::check() at all
clingo_propagator_check_mode_total    = 1, //!< call @ref ::clingo_propagator::check() on total assignments
clingo_propagator_check_mode_fixpoint = 2, //!< call @ref ::clingo_propagator::check() on propagation fixpoints
clingo_propagator_check_mode_both     = 3, //!< call @ref ::clingo_propagator::check() on propagation fixpoints and total assignments
};
typedef int clingo_propagator_check_mode_t;
enum clingo_weight_constraint_type_e {
clingo_weight_constraint_type_implication_left  = -1, //!< the weight constraint implies the literal
clingo_weight_constraint_type_implication_right =  1, //!< the literal implies the weight constraint
clingo_weight_constraint_type_equivalence       =  0, //!< the weight constraint is equivalent to the literal
};
typedef int clingo_weight_constraint_type_t;
typedef struct clingo_propagate_init clingo_propagate_init_t;
bool clingo_propagate_init_solver_literal(clingo_propagate_init_t const *init, clingo_literal_t aspif_literal, clingo_literal_t *solver_literal);
bool clingo_propagate_init_add_watch(clingo_propagate_init_t *init, clingo_literal_t solver_literal);
bool clingo_propagate_init_add_watch_to_thread(clingo_propagate_init_t *init, clingo_literal_t solver_literal, clingo_id_t thread_id);
bool clingo_propagate_init_remove_watch(clingo_propagate_init_t *init, clingo_literal_t solver_literal);
bool clingo_propagate_init_remove_watch_from_thread(clingo_propagate_init_t *init, clingo_literal_t solver_literal, uint32_t thread_id);
bool clingo_propagate_init_freeze_literal(clingo_propagate_init_t *init, clingo_literal_t solver_literal);
bool clingo_propagate_init_symbolic_atoms(clingo_propagate_init_t const *init, clingo_symbolic_atoms_t const **atoms);
bool clingo_propagate_init_theory_atoms(clingo_propagate_init_t const *init, clingo_theory_atoms_t const **atoms);
int clingo_propagate_init_number_of_threads(clingo_propagate_init_t const *init);
void clingo_propagate_init_set_check_mode(clingo_propagate_init_t *init, clingo_propagator_check_mode_t mode);
clingo_propagator_check_mode_t clingo_propagate_init_get_check_mode(clingo_propagate_init_t const *init);
clingo_assignment_t const *clingo_propagate_init_assignment(clingo_propagate_init_t const *init);
bool clingo_propagate_init_add_literal(clingo_propagate_init_t *init, bool freeze, clingo_literal_t *result);
bool clingo_propagate_init_add_clause(clingo_propagate_init_t *init, clingo_literal_t const *clause, size_t size, bool *result);
bool clingo_propagate_init_add_weight_constraint(clingo_propagate_init_t *init, clingo_literal_t literal, clingo_weighted_literal_t const *literals, size_t size, clingo_weight_t bound, clingo_weight_constraint_type_t type, bool compare_equal, bool *result);
bool clingo_propagate_init_add_minimize(clingo_propagate_init_t *init, clingo_literal_t literal, clingo_weight_t weight, clingo_weight_t priority);
bool clingo_propagate_init_propagate(clingo_propagate_init_t *init, bool *result);
enum clingo_clause_type_e {
clingo_clause_type_learnt          = 0, //!< clause is subject to the solvers deletion policy
clingo_clause_type_static          = 1, //!< clause is not subject to the solvers deletion policy
clingo_clause_type_volatile        = 2, //!< like ::clingo_clause_type_learnt but the clause is deleted after a solving step
clingo_clause_type_volatile_static = 3  //!< like ::clingo_clause_type_static but the clause is deleted after a solving step
};
typedef int clingo_clause_type_t;
typedef struct clingo_propagate_control clingo_propagate_control_t;
clingo_id_t clingo_propagate_control_thread_id(clingo_propagate_control_t const *control);
clingo_assignment_t const *clingo_propagate_control_assignment(clingo_propagate_control_t const *control);
bool clingo_propagate_control_add_literal(clingo_propagate_control_t *control, clingo_literal_t *result);
bool clingo_propagate_control_add_watch(clingo_propagate_control_t *control, clingo_literal_t literal);
bool clingo_propagate_control_has_watch(clingo_propagate_control_t const *control, clingo_literal_t literal);
void clingo_propagate_control_remove_watch(clingo_propagate_control_t *control, clingo_literal_t literal);
bool clingo_propagate_control_add_clause(clingo_propagate_control_t *control, clingo_literal_t const *clause, size_t size, clingo_clause_type_t type, bool *result);
bool clingo_propagate_control_propagate(clingo_propagate_control_t *control, bool *result);
typedef bool (*clingo_propagator_init_callback_t) (clingo_propagate_init_t *, void *);
typedef bool (*clingo_propagator_propagate_callback_t) (clingo_propagate_control_t *, clingo_literal_t const *, size_t, void *);
typedef void (*clingo_propagator_undo_callback_t) (clingo_propagate_control_t const *, clingo_literal_t const *, size_t, void *);
typedef bool (*clingo_propagator_check_callback_t) (clingo_propagate_control_t *, void *);
typedef struct clingo_propagator {
bool (*init) (clingo_propagate_init_t *init, void *data);
bool (*propagate) (clingo_propagate_control_t *control, clingo_literal_t const *changes, size_t size, void *data);
void (*undo) (clingo_propagate_control_t const *control, clingo_literal_t const *changes, size_t size, void *data);
bool (*check) (clingo_propagate_control_t *control, void *data);
bool (*decide) (clingo_id_t thread_id, clingo_assignment_t const *assignment, clingo_literal_t fallback, void *data, clingo_literal_t *decision);
} clingo_propagator_t;
enum clingo_heuristic_type_e {
clingo_heuristic_type_level  = 0, //!< set the level of an atom
clingo_heuristic_type_sign   = 1, //!< configure which sign to chose for an atom
clingo_heuristic_type_factor = 2, //!< modify VSIDS factor of an atom
clingo_heuristic_type_init   = 3, //!< modify the initial VSIDS score of an atom
clingo_heuristic_type_true   = 4, //!< set the level of an atom and choose a positive sign
clingo_heuristic_type_false  = 5  //!< set the level of an atom and choose a negative sign
};
typedef int clingo_heuristic_type_t;
enum clingo_external_type_e {
clingo_external_type_free    = 0, //!< allow an external to be assigned freely
clingo_external_type_true    = 1, //!< assign an external to true
clingo_external_type_false   = 2, //!< assign an external to false
clingo_external_type_release = 3, //!< no longer treat an atom as external
};
typedef int clingo_external_type_t;
typedef struct clingo_backend clingo_backend_t;
bool clingo_backend_begin(clingo_backend_t *backend);
bool clingo_backend_end(clingo_backend_t *backend);
bool clingo_backend_rule(clingo_backend_t *backend, bool choice, clingo_atom_t const *head, size_t head_size, clingo_literal_t const *body, size_t body_size);
bool clingo_backend_weight_rule(clingo_backend_t *backend, bool choice, clingo_atom_t const *head, size_t head_size, clingo_weight_t lower_bound, clingo_weighted_literal_t const *body, size_t body_size);
bool clingo_backend_minimize(clingo_backend_t *backend, clingo_weight_t priority, clingo_weighted_literal_t const* literals, size_t size);
bool clingo_backend_project(clingo_backend_t *backend, clingo_atom_t const *atoms, size_t size);
bool clingo_backend_external(clingo_backend_t *backend, clingo_atom_t atom, clingo_external_type_t type);
bool clingo_backend_assume(clingo_backend_t *backend, clingo_literal_t const *literals, size_t size);
bool clingo_backend_heuristic(clingo_backend_t *backend, clingo_atom_t atom, clingo_heuristic_type_t type, int bias, unsigned priority, clingo_literal_t const *condition, size_t size);
bool clingo_backend_acyc_edge(clingo_backend_t *backend, int node_u, int node_v, clingo_literal_t const *condition, size_t size);
bool clingo_backend_add_atom(clingo_backend_t *backend, clingo_symbol_t *symbol, clingo_atom_t *atom);
enum clingo_configuration_type_e {
clingo_configuration_type_value = 1, //!< the entry is a (string) value
clingo_configuration_type_array = 2, //!< the entry is an array
clingo_configuration_type_map   = 4  //!< the entry is a map
};
typedef unsigned clingo_configuration_type_bitset_t;
typedef struct clingo_configuration clingo_configuration_t;
bool clingo_configuration_root(clingo_configuration_t const *configuration, clingo_id_t *key);
bool clingo_configuration_type(clingo_configuration_t const *configuration, clingo_id_t key, clingo_configuration_type_bitset_t *type);
bool clingo_configuration_description(clingo_configuration_t const *configuration, clingo_id_t key, char const **description);
bool clingo_configuration_array_size(clingo_configuration_t const *configuration, clingo_id_t key, size_t *size);
bool clingo_configuration_array_at(clingo_configuration_t const *configuration, clingo_id_t key, size_t offset, clingo_id_t *subkey);
bool clingo_configuration_map_size(clingo_configuration_t const *configuration, clingo_id_t key, size_t* size);
bool clingo_configuration_map_has_subkey(clingo_configuration_t const *configuration, clingo_id_t key, char const *name, bool *result);
bool clingo_configuration_map_subkey_name(clingo_configuration_t const *configuration, clingo_id_t key, size_t offset, char const **name);
bool clingo_configuration_map_at(clingo_configuration_t const *configuration, clingo_id_t key, char const *name, clingo_id_t* subkey);
bool clingo_configuration_value_is_assigned(clingo_configuration_t const *configuration, clingo_id_t key, bool *assigned);
bool clingo_configuration_value_get_size(clingo_configuration_t const *configuration, clingo_id_t key, size_t *size);
bool clingo_configuration_value_get(clingo_configuration_t const *configuration, clingo_id_t key, char *value, size_t size);
bool clingo_configuration_value_set(clingo_configuration_t *configuration, clingo_id_t key, char const *value);
enum clingo_statistics_type_e {
clingo_statistics_type_empty = 0, //!< the entry is invalid (has neither of the types below)
clingo_statistics_type_value = 1, //!< the entry is a (double) value
clingo_statistics_type_array = 2, //!< the entry is an array
clingo_statistics_type_map   = 3  //!< the entry is a map
};
typedef int clingo_statistics_type_t;
typedef struct clingo_statistic clingo_statistics_t;
bool clingo_statistics_root(clingo_statistics_t const *statistics, uint64_t *key);
bool clingo_statistics_type(clingo_statistics_t const *statistics, uint64_t key, clingo_statistics_type_t *type);
bool clingo_statistics_array_size(clingo_statistics_t const *statistics, uint64_t key, size_t *size);
bool clingo_statistics_array_at(clingo_statistics_t const *statistics, uint64_t key, size_t offset, uint64_t *subkey);
bool clingo_statistics_array_push(clingo_statistics_t *statistics, uint64_t key, clingo_statistics_type_t type, uint64_t *subkey);
bool clingo_statistics_map_size(clingo_statistics_t const *statistics, uint64_t key, size_t *size);
bool clingo_statistics_map_has_subkey(clingo_statistics_t const *statistics, uint64_t key, char const *name, bool* result);
bool clingo_statistics_map_subkey_name(clingo_statistics_t const *statistics, uint64_t key, size_t offset, char const **name);
bool clingo_statistics_map_at(clingo_statistics_t const *statistics, uint64_t key, char const *name, uint64_t *subkey);
bool clingo_statistics_map_add_subkey(clingo_statistics_t *statistics, uint64_t key, char const *name, clingo_statistics_type_t type, uint64_t *subkey);
bool clingo_statistics_value_get(clingo_statistics_t const *statistics, uint64_t key, double *value);
bool clingo_statistics_value_set(clingo_statistics_t *statistics, uint64_t key, double value);
typedef struct clingo_solve_control clingo_solve_control_t;
typedef struct clingo_model clingo_model_t;
enum clingo_model_type_e {
clingo_model_type_stable_model          = 0, //!< The model represents a stable model.
clingo_model_type_brave_consequences    = 1, //!< The model represents a set of brave consequences.
clingo_model_type_cautious_consequences = 2  //!< The model represents a set of cautious consequences.
};
typedef int clingo_model_type_t;
enum clingo_show_type_e {
clingo_show_type_csp        = 1,  //!< Select CSP assignments.
clingo_show_type_shown      = 2,  //!< Select shown atoms and terms.
clingo_show_type_atoms      = 4,  //!< Select all atoms.
clingo_show_type_terms      = 8,  //!< Select all terms.
clingo_show_type_theory     = 16, //!< Select symbols added by theory.
clingo_show_type_all        = 31, //!< Select everything.
clingo_show_type_complement = 32  //!< Select false instead of true atoms (::clingo_show_type_atoms) or terms (::clingo_show_type_terms).
};
typedef unsigned clingo_show_type_bitset_t;
bool clingo_model_type(clingo_model_t const *model, clingo_model_type_t *type);
bool clingo_model_number(clingo_model_t const *model, uint64_t *number);
bool clingo_model_symbols_size(clingo_model_t const *model, clingo_show_type_bitset_t show, size_t *size);
bool clingo_model_symbols(clingo_model_t const *model, clingo_show_type_bitset_t show, clingo_symbol_t *symbols, size_t size);
bool clingo_model_contains(clingo_model_t const *model, clingo_symbol_t atom, bool *contained);
bool clingo_model_is_true(clingo_model_t const *model, clingo_literal_t literal, bool *result);
bool clingo_model_cost_size(clingo_model_t const *model, size_t *size);
bool clingo_model_cost(clingo_model_t const *model, int64_t *costs, size_t size);
bool clingo_model_optimality_proven(clingo_model_t const *model, bool *proven);
bool clingo_model_thread_id(clingo_model_t const *model, clingo_id_t *id);
bool clingo_model_extend(clingo_model_t *model, clingo_symbol_t const *symbols, size_t size);
bool clingo_model_context(clingo_model_t const *model, clingo_solve_control_t **control);
bool clingo_solve_control_symbolic_atoms(clingo_solve_control_t const *control, clingo_symbolic_atoms_t const **atoms);
bool clingo_solve_control_add_clause(clingo_solve_control_t *control, clingo_literal_t const *clause, size_t size);
enum clingo_solve_result_e {
clingo_solve_result_satisfiable   = 1,
clingo_solve_result_unsatisfiable = 2,
clingo_solve_result_exhausted     = 4,
clingo_solve_result_interrupted   = 8
};
typedef unsigned clingo_solve_result_bitset_t;
enum clingo_solve_mode_e {
clingo_solve_mode_async = 1, //!< Enable non-blocking search.
clingo_solve_mode_yield = 2, //!< Yield models in calls to clingo_solve_handle_model.
};
typedef unsigned clingo_solve_mode_bitset_t;
enum clingo_solve_event_type_e {
clingo_solve_event_type_model      = 0, //!< Issued if a model is found.
clingo_solve_event_type_unsat      = 1, //!< Issued if an optimization problem is found unsatisfiable.
clingo_solve_event_type_statistics = 2, //!< Issued when the statistics can be updated.
clingo_solve_event_type_finish     = 3, //!< Issued if the search has completed.
};
typedef unsigned clingo_solve_event_type_t;
typedef bool (*clingo_solve_event_callback_t) (clingo_solve_event_type_t type, void *event, void *data, bool *goon);
typedef struct clingo_solve_handle clingo_solve_handle_t;
bool clingo_solve_handle_get(clingo_solve_handle_t *handle, clingo_solve_result_bitset_t *result);
void clingo_solve_handle_wait(clingo_solve_handle_t *handle, double timeout, bool *result);
bool clingo_solve_handle_model(clingo_solve_handle_t *handle, clingo_model_t const **model);
bool clingo_solve_handle_core(clingo_solve_handle_t *handle, clingo_literal_t const **core, size_t *size);
bool clingo_solve_handle_resume(clingo_solve_handle_t *handle);
bool clingo_solve_handle_cancel(clingo_solve_handle_t *handle);
bool clingo_solve_handle_close(clingo_solve_handle_t *handle);
enum clingo_ast_theory_sequence_type_e {
clingo_ast_theory_sequence_type_tuple, //!< Theory tuples "(t1,...,tn)".
clingo_ast_theory_sequence_type_list,  //!< Theory lists "[t1,...,tn]".
clingo_ast_theory_sequence_type_set    //!< Theory sets "{t1,...,tn}".
};
typedef int clingo_ast_theory_sequence_type_t;
enum clingo_ast_comparison_operator_e {
clingo_ast_comparison_operator_greater_than  = 0, //!< Operator ">".
clingo_ast_comparison_operator_less_than     = 1, //!< Operator "<".
clingo_ast_comparison_operator_less_equal    = 2, //!< Operator "<=".
clingo_ast_comparison_operator_greater_equal = 3, //!< Operator ">=".
clingo_ast_comparison_operator_not_equal     = 4, //!< Operator "!=".
clingo_ast_comparison_operator_equal         = 5  //!< Operator "==".
};
typedef int clingo_ast_comparison_operator_t;
enum clingo_ast_sign_e {
clingo_ast_sign_no_sign         = 0, //!< For positive literals.
clingo_ast_sign_negation        = 1, //!< For negative literals (prefix "not").
clingo_ast_sign_double_negation = 2  //!< For double negated literals (prefix "not not").
};
typedef int clingo_ast_sign_t;
enum clingo_ast_unary_operator_e {
clingo_ast_unary_operator_minus    = 0, //!< Operator "-".
clingo_ast_unary_operator_negation = 1, //!< Operator "~".
clingo_ast_unary_operator_absolute = 2  //!< Operator "|.|".
};
typedef int clingo_ast_unary_operator_t;
enum clingo_ast_binary_operator_e {
clingo_ast_binary_operator_xor            = 0, //!< Operator "^".
clingo_ast_binary_operator_or             = 1, //!< Operator "?".
clingo_ast_binary_operator_and            = 2, //!< Operator "&".
clingo_ast_binary_operator_plus           = 3, //!< Operator "+".
clingo_ast_binary_operator_minus          = 4, //!< Operator "-".
clingo_ast_binary_operator_multiplication = 5, //!< Operator "*".
clingo_ast_binary_operator_division       = 6, //!< Operator "/".
clingo_ast_binary_operator_modulo         = 7, //!< Operator "\".
clingo_ast_binary_operator_power          = 8  //!< Operator "**".
};
typedef int clingo_ast_binary_operator_t;
enum clingo_ast_aggregate_function_e {
clingo_ast_aggregate_function_count = 0, //!< Operator "^".
clingo_ast_aggregate_function_sum   = 1, //!< Operator "?".
clingo_ast_aggregate_function_sump  = 2, //!< Operator "&".
clingo_ast_aggregate_function_min   = 3, //!< Operator "+".
clingo_ast_aggregate_function_max   = 4  //!< Operator "-".
};
typedef int clingo_ast_aggregate_function_t;
enum clingo_ast_theory_operator_type_e {
clingo_ast_theory_operator_type_unary        = 0, //!< An unary theory operator.
clingo_ast_theory_operator_type_binary_left  = 1, //!< A left associative binary operator.
clingo_ast_theory_operator_type_binary_right = 2  //!< A right associative binary operator.
};
typedef int clingo_ast_theory_operator_type_t;
enum clingo_ast_theory_atom_definition_type_e {
clingo_ast_theory_atom_definition_type_head      = 0, //!< For theory atoms that can appear in the head.
clingo_ast_theory_atom_definition_type_body      = 1, //!< For theory atoms that can appear in the body.
clingo_ast_theory_atom_definition_type_any       = 2, //!< For theory atoms that can appear in both head and body.
clingo_ast_theory_atom_definition_type_directive = 3  //!< For theory atoms that must not have a body.
};
typedef int clingo_ast_theory_atom_definition_type_t;
enum clingo_ast_type_e {
clingo_ast_type_id,
clingo_ast_type_variable,
clingo_ast_type_symbolic_term,
clingo_ast_type_unary_operation,
clingo_ast_type_binary_operation,
clingo_ast_type_interval,
clingo_ast_type_function,
clingo_ast_type_pool,
clingo_ast_type_csp_product,
clingo_ast_type_csp_sum,
clingo_ast_type_csp_guard,
clingo_ast_type_boolean_constant,
clingo_ast_type_symbolic_atom,
clingo_ast_type_comparison,
clingo_ast_type_csp_literal,
clingo_ast_type_aggregate_guard,
clingo_ast_type_conditional_literal,
clingo_ast_type_aggregate,
clingo_ast_type_body_aggregate_element,
clingo_ast_type_body_aggregate,
clingo_ast_type_head_aggregate_element,
clingo_ast_type_head_aggregate,
clingo_ast_type_disjunction,
clingo_ast_type_disjoint_element,
clingo_ast_type_disjoint,
clingo_ast_type_theory_sequence,
clingo_ast_type_theory_function,
clingo_ast_type_theory_unparsed_term_element,
clingo_ast_type_theory_unparsed_term,
clingo_ast_type_theory_guard,
clingo_ast_type_theory_atom_element,
clingo_ast_type_theory_atom,
clingo_ast_type_literal,
clingo_ast_type_theory_operator_definition,
clingo_ast_type_theory_term_definition,
clingo_ast_type_theory_guard_definition,
clingo_ast_type_theory_atom_definition,
clingo_ast_type_rule,
clingo_ast_type_definition,
clingo_ast_type_show_signature,
clingo_ast_type_show_term,
clingo_ast_type_minimize,
clingo_ast_type_script,
clingo_ast_type_program,
clingo_ast_type_external,
clingo_ast_type_edge,
clingo_ast_type_heuristic,
clingo_ast_type_project_atom,
clingo_ast_type_project_signature,
clingo_ast_type_defined,
clingo_ast_type_theory_definition
};
typedef int clingo_ast_type_t;
enum clingo_ast_attribute_type_e {
clingo_ast_attribute_type_number       = 0, //!< For an attribute of type "int".
clingo_ast_attribute_type_symbol       = 1, //!< For an attribute of type "clingo_ast_symbol_t".
clingo_ast_attribute_type_location     = 2, //!< For an attribute of type "clingo_location_t".
clingo_ast_attribute_type_string       = 3, //!< For an attribute of type "char const *".
clingo_ast_attribute_type_ast          = 4, //!< For an attribute of type "clingo_ast_t *".
clingo_ast_attribute_type_optional_ast = 5, //!< For an attribute of type "clingo_ast_t *" that can be NULL.
clingo_ast_attribute_type_string_array = 6, //!< For an attribute of type "char const **".
clingo_ast_attribute_type_ast_array    = 7, //!< For an attribute of type "clingo_ast_t **".
};
typedef int clingo_ast_attribute_type_t;
enum clingo_ast_attribute_e {
clingo_ast_attribute_argument,
clingo_ast_attribute_arguments,
clingo_ast_attribute_arity,
clingo_ast_attribute_atom,
clingo_ast_attribute_atoms,
clingo_ast_attribute_atom_type,
clingo_ast_attribute_bias,
clingo_ast_attribute_body,
clingo_ast_attribute_code,
clingo_ast_attribute_coefficient,
clingo_ast_attribute_comparison,
clingo_ast_attribute_condition,
clingo_ast_attribute_csp,
clingo_ast_attribute_elements,
clingo_ast_attribute_external,
clingo_ast_attribute_external_type,
clingo_ast_attribute_function,
clingo_ast_attribute_guard,
clingo_ast_attribute_guards,
clingo_ast_attribute_head,
clingo_ast_attribute_is_default,
clingo_ast_attribute_left,
clingo_ast_attribute_left_guard,
clingo_ast_attribute_literal,
clingo_ast_attribute_location,
clingo_ast_attribute_modifier,
clingo_ast_attribute_name,
clingo_ast_attribute_node_u,
clingo_ast_attribute_node_v,
clingo_ast_attribute_operator_name,
clingo_ast_attribute_operator_type,
clingo_ast_attribute_operators,
clingo_ast_attribute_parameters,
clingo_ast_attribute_positive,
clingo_ast_attribute_priority,
clingo_ast_attribute_right,
clingo_ast_attribute_right_guard,
clingo_ast_attribute_sequence_type,
clingo_ast_attribute_sign,
clingo_ast_attribute_symbol,
clingo_ast_attribute_term,
clingo_ast_attribute_terms,
clingo_ast_attribute_value,
clingo_ast_attribute_variable,
clingo_ast_attribute_weight,
};
typedef int clingo_ast_attribute_t;
typedef struct clingo_ast_attribute_names {
char const * const * names;
size_t size;
} clingo_ast_attribute_names_t;
extern clingo_ast_attribute_names_t g_clingo_ast_attribute_names;
typedef struct clingo_ast_argument {
clingo_ast_attribute_t attribute;
clingo_ast_attribute_type_t type;
} clingo_ast_argument_t;
typedef struct clingo_ast_constructor {
char const *name;
clingo_ast_argument_t const *arguments;
size_t size;
} clingo_ast_constructor_t;
typedef struct clingo_ast_constructors {
clingo_ast_constructor_t const *constructors;
size_t size;
} clingo_ast_constructors_t;
extern clingo_ast_constructors_t g_clingo_ast_constructors;
typedef struct clingo_ast clingo_ast_t;
bool clingo_ast_build(clingo_ast_type_t type, clingo_ast_t **ast, ...);
void clingo_ast_acquire(clingo_ast_t *ast);
void clingo_ast_release(clingo_ast_t *ast);
bool clingo_ast_copy(clingo_ast_t *ast, clingo_ast_t **copy);
bool clingo_ast_deep_copy(clingo_ast_t *ast, clingo_ast_t **copy);
bool clingo_ast_less_than(clingo_ast_t *a, clingo_ast_t *b);
bool clingo_ast_equal(clingo_ast_t *a, clingo_ast_t *b);
size_t clingo_ast_hash(clingo_ast_t *ast);
bool clingo_ast_to_string_size(clingo_ast_t *ast, size_t *size);
bool clingo_ast_to_string(clingo_ast_t *ast, char *string, size_t size);
bool clingo_ast_get_type(clingo_ast_t *ast, clingo_ast_type_t *type);
bool clingo_ast_has_attribute(clingo_ast_t *ast, clingo_ast_attribute_t attribute, bool *has_attribute);
bool clingo_ast_attribute_type(clingo_ast_t *ast, clingo_ast_attribute_t attribute, clingo_ast_attribute_type_t *type);
bool clingo_ast_attribute_get_number(clingo_ast_t *ast, clingo_ast_attribute_t attribute, int *value);
bool clingo_ast_attribute_set_number(clingo_ast_t *ast, clingo_ast_attribute_t attribute, int value);
bool clingo_ast_attribute_get_symbol(clingo_ast_t *ast, clingo_ast_attribute_t attribute, clingo_symbol_t *value);
bool clingo_ast_attribute_set_symbol(clingo_ast_t *ast, clingo_ast_attribute_t attribute, clingo_symbol_t value);
bool clingo_ast_attribute_get_location(clingo_ast_t *ast, clingo_ast_attribute_t attribute, clingo_location_t *value);
bool clingo_ast_attribute_set_location(clingo_ast_t *ast, clingo_ast_attribute_t attribute, clingo_location_t const *value);
bool clingo_ast_attribute_get_string(clingo_ast_t *ast, clingo_ast_attribute_t attribute, char const **value);
bool clingo_ast_attribute_set_string(clingo_ast_t *ast, clingo_ast_attribute_t attribute, char const *value);
bool clingo_ast_attribute_get_ast(clingo_ast_t *ast, clingo_ast_attribute_t attribute, clingo_ast_t **value);
bool clingo_ast_attribute_set_ast(clingo_ast_t *ast, clingo_ast_attribute_t attribute, clingo_ast_t *value);
bool clingo_ast_attribute_get_optional_ast(clingo_ast_t *ast, clingo_ast_attribute_t attribute, clingo_ast_t **value);
bool clingo_ast_attribute_set_optional_ast(clingo_ast_t *ast, clingo_ast_attribute_t attribute, clingo_ast_t *value);
bool clingo_ast_attribute_get_string_at(clingo_ast_t *ast, clingo_ast_attribute_t attribute, size_t index, char const **value);
bool clingo_ast_attribute_set_string_at(clingo_ast_t *ast, clingo_ast_attribute_t attribute, size_t index, char const *value);
bool clingo_ast_attribute_delete_string_at(clingo_ast_t *ast, clingo_ast_attribute_t attribute, size_t index);
bool clingo_ast_attribute_size_string_array(clingo_ast_t *ast, clingo_ast_attribute_t attribute, size_t *size);
bool clingo_ast_attribute_insert_string_at(clingo_ast_t *ast, clingo_ast_attribute_t attribute, size_t index, char const *value);
bool clingo_ast_attribute_get_ast_at(clingo_ast_t *ast, clingo_ast_attribute_t attribute, size_t index, clingo_ast_t **value);
bool clingo_ast_attribute_set_ast_at(clingo_ast_t *ast, clingo_ast_attribute_t attribute, size_t index, clingo_ast_t *value);
bool clingo_ast_attribute_delete_ast_at(clingo_ast_t *ast, clingo_ast_attribute_t attribute, size_t index);
bool clingo_ast_attribute_size_ast_array(clingo_ast_t *ast, clingo_ast_attribute_t attribute, size_t *size);
bool clingo_ast_attribute_insert_ast_at(clingo_ast_t *ast, clingo_ast_attribute_t attribute, size_t index, clingo_ast_t *value);
typedef bool (*clingo_ast_callback_t) (clingo_ast_t *ast, void *data);
bool clingo_ast_parse_string(char const *program, clingo_ast_callback_t callback, void *callback_data, clingo_logger_t logger, void *logger_data, unsigned message_limit);
bool clingo_ast_parse_files(char const * const *files, size_t size, clingo_ast_callback_t callback, void *callback_data, clingo_logger_t logger, void *logger_data, unsigned message_limit);
typedef struct clingo_program_builder clingo_program_builder_t;
bool clingo_program_builder_begin(clingo_program_builder_t *builder);
bool clingo_program_builder_end(clingo_program_builder_t *builder);
bool clingo_program_builder_add(clingo_program_builder_t *builder, clingo_ast_t *ast);
enum clingo_ast_unpool_type_e {
clingo_ast_unpool_type_condition = 1, //!< To only unpool conditions of conditional literals.
clingo_ast_unpool_type_other = 2,     //!< To unpool everything except conditions of conditional literals.
clingo_ast_unpool_type_all = 3,       //!< To unpool everything.
};
typedef int clingo_ast_unpool_type_bitset_t;
bool clingo_ast_unpool(clingo_ast_t *ast, clingo_ast_unpool_type_bitset_t unpool_type, clingo_ast_callback_t callback, void *callback_data);
typedef struct clingo_ground_program_observer {
bool (*init_program)(bool incremental, void *data);
bool (*begin_step)(void *data);
bool (*end_step)(void *data);
bool (*rule)(bool choice, clingo_atom_t const *head, size_t head_size, clingo_literal_t const *body, size_t body_size, void *data);
bool (*weight_rule)(bool choice, clingo_atom_t const *head, size_t head_size, clingo_weight_t lower_bound, clingo_weighted_literal_t const *body, size_t body_size, void *data);
bool (*minimize)(clingo_weight_t priority, clingo_weighted_literal_t const* literals, size_t size, void *data);
bool (*project)(clingo_atom_t const *atoms, size_t size, void *data);
bool (*output_atom)(clingo_symbol_t symbol, clingo_atom_t atom, void *data);
bool (*output_term)(clingo_symbol_t symbol, clingo_literal_t const *condition, size_t size, void *data);
bool (*output_csp)(clingo_symbol_t symbol, int value, clingo_literal_t const *condition, size_t size, void *data);
bool (*external)(clingo_atom_t atom, clingo_external_type_t type, void *data);
bool (*assume)(clingo_literal_t const *literals, size_t size, void *data);
bool (*heuristic)(clingo_atom_t atom, clingo_heuristic_type_t type, int bias, unsigned priority, clingo_literal_t const *condition, size_t size, void *data);
bool (*acyc_edge)(int node_u, int node_v, clingo_literal_t const *condition, size_t size, void *data);
bool (*theory_term_number)(clingo_id_t term_id, int number, void *data);
bool (*theory_term_string)(clingo_id_t term_id, char const *name, void *data);
bool (*theory_term_compound)(clingo_id_t term_id, int name_id_or_type, clingo_id_t const *arguments, size_t size, void *data);
bool (*theory_element)(clingo_id_t element_id, clingo_id_t const *terms, size_t terms_size, clingo_literal_t const *condition, size_t condition_size, void *data);
bool (*theory_atom)(clingo_id_t atom_id_or_zero, clingo_id_t term_id, clingo_id_t const *elements, size_t size, void *data);
bool (*theory_atom_with_guard)(clingo_id_t atom_id_or_zero, clingo_id_t term_id, clingo_id_t const *elements, size_t size, clingo_id_t operator_id, clingo_id_t right_hand_side_id, void *data);
} clingo_ground_program_observer_t;
typedef struct clingo_part {
char const *name;              //!< name of the program part
clingo_symbol_t const *params; //!< array of parameters
size_t size;                   //!< number of parameters
} clingo_part_t;
typedef bool (*clingo_ground_callback_t) (clingo_location_t const *location, char const *name, clingo_symbol_t const *arguments, size_t arguments_size, void *data, clingo_symbol_callback_t symbol_callback, void *symbol_callback_data);
typedef struct clingo_control clingo_control_t;
bool clingo_control_new(char const *const * arguments, size_t arguments_size, clingo_logger_t logger, void *logger_data, unsigned message_limit, clingo_control_t **control);
void clingo_control_free(clingo_control_t *control);
bool clingo_control_load(clingo_control_t *control, char const *file);
bool clingo_control_add(clingo_control_t *control, char const *name, char const * const * parameters, size_t parameters_size, char const *program);
bool clingo_control_ground(clingo_control_t *control, clingo_part_t const *parts, size_t parts_size, clingo_ground_callback_t ground_callback, void *ground_callback_data);
bool clingo_control_solve(clingo_control_t *control, clingo_solve_mode_bitset_t mode, clingo_literal_t const *assumptions, size_t assumptions_size, clingo_solve_event_callback_t notify, void *data, clingo_solve_handle_t **handle);
bool clingo_control_cleanup(clingo_control_t *control);
bool clingo_control_assign_external(clingo_control_t *control, clingo_literal_t literal, clingo_truth_value_t value);
bool clingo_control_release_external(clingo_control_t *control, clingo_literal_t literal);
bool clingo_control_register_propagator(clingo_control_t *control, clingo_propagator_t const *propagator, void *data, bool sequential);
bool clingo_control_is_conflicting(clingo_control_t const *control);
bool clingo_control_statistics(clingo_control_t const *control, clingo_statistics_t const **statistics);
void clingo_control_interrupt(clingo_control_t *control);
bool clingo_control_clasp_facade(clingo_control_t *control, void **clasp);
bool clingo_control_configuration(clingo_control_t *control, clingo_configuration_t **configuration);
bool clingo_control_set_enable_enumeration_assumption(clingo_control_t *control, bool enable);
bool clingo_control_get_enable_enumeration_assumption(clingo_control_t *control);
bool clingo_control_set_enable_cleanup(clingo_control_t *control, bool enable);
bool clingo_control_get_enable_cleanup(clingo_control_t *control);
bool clingo_control_get_const(clingo_control_t const *control, char const *name, clingo_symbol_t *symbol);
bool clingo_control_has_const(clingo_control_t const *control, char const *name, bool *exists);
bool clingo_control_symbolic_atoms(clingo_control_t const *control, clingo_symbolic_atoms_t const **atoms);
bool clingo_control_theory_atoms(clingo_control_t const *control, clingo_theory_atoms_t const **atoms);
bool clingo_control_register_observer(clingo_control_t *control, clingo_ground_program_observer_t const *observer, bool replace, void *data);
bool clingo_control_backend(clingo_control_t *control, clingo_backend_t **backend);
bool clingo_control_program_builder(clingo_control_t *control, clingo_program_builder_t **builder);
typedef struct clingo_options clingo_options_t;
typedef bool (*clingo_main_function_t) (clingo_control_t *control, char const *const * files, size_t size, void *data);
typedef bool (*clingo_default_model_printer_t) (void *data);
typedef bool (*clingo_model_printer_t) (clingo_model_t const *model, clingo_default_model_printer_t printer, void *printer_data, void *data);
typedef struct clingo_application {
char const *(*program_name) (void *data);                        //!< callback to obtain program name
char const *(*version) (void *data);                             //!< callback to obtain version information
unsigned (*message_limit) (void *data);                          //!< callback to obtain message limit
clingo_main_function_t main;                                     //!< callback to override clingo's main function
clingo_logger_t logger;                                          //!< callback to override default logger
clingo_model_printer_t printer;                                  //!< callback to override default model printing
bool (*register_options)(clingo_options_t *options, void *data); //!< callback to register options
bool (*validate_options)(void *data);                            //!< callback validate options
} clingo_application_t;
bool clingo_options_add(clingo_options_t *options, char const *group, char const *option, char const *description, bool (*parse) (char const *value, void *data), void *data, bool multi, char const *argument);
bool clingo_options_add_flag(clingo_options_t *options, char const *group, char const *option, char const *description, bool *target);
int clingo_main(clingo_application_t *application, char const *const * arguments, size_t size, void *data);
typedef struct clingo_script {
bool (*execute) (clingo_location_t const *location, char const *code, void *data);
bool (*call) (clingo_location_t const *location, char const *name, clingo_symbol_t const *arguments, size_t arguments_size, clingo_symbol_callback_t symbol_callback, void *symbol_callback_data, void *data);
bool (*callable) (char const * name, bool *result, void *data);
bool (*main) (clingo_control_t *control, void *data);
void (*free) (void *data);
char const *version;
} clingo_script_t;
bool clingo_register_script(char const *name, clingo_script_t const *script, void *data);
char const *clingo_script_version(char const *name);
extern "Python" bool pyclingo_solve_event_callback(clingo_solve_event_type_t type, void *event, void *data, bool *goon);
extern "Python" void pyclingo_logger_callback(clingo_warning_t code, char const *message, void *data);
extern "Python" bool pyclingo_ground_callback(clingo_location_t const *location, char const *name, clingo_symbol_t const *arguments, size_t arguments_size, void *data, clingo_symbol_callback_t symbol_callback, void *symbol_callback_data);
extern "Python" bool pyclingo_propagator_init(clingo_propagate_init_t *init, void *data);
extern "Python" bool pyclingo_propagator_propagate(clingo_propagate_control_t *control, clingo_literal_t const *changes, size_t size, void *data);
extern "Python" void pyclingo_propagator_undo(clingo_propagate_control_t const *control, clingo_literal_t const *changes, size_t size, void *data);
extern "Python" bool pyclingo_propagator_check(clingo_propagate_control_t *control, void *data);
extern "Python" bool pyclingo_propagator_decide(clingo_id_t thread_id, clingo_assignment_t const *assignment, clingo_literal_t fallback, void *data, clingo_literal_t *decision);
extern "Python" bool pyclingo_observer_init_program(bool incremental, void *data);
extern "Python" bool pyclingo_observer_begin_step(void *data);
extern "Python" bool pyclingo_observer_end_step(void *data);
extern "Python" bool pyclingo_observer_rule(bool choice, clingo_atom_t const *head, size_t head_size, clingo_literal_t const *body, size_t body_size, void *data);
extern "Python" bool pyclingo_observer_weight_rule(bool choice, clingo_atom_t const *head, size_t head_size, clingo_weight_t lower_bound, clingo_weighted_literal_t const *body, size_t body_size, void *data);
extern "Python" bool pyclingo_observer_minimize(clingo_weight_t priority, clingo_weighted_literal_t const* literals, size_t size, void *data);
extern "Python" bool pyclingo_observer_project(clingo_atom_t const *atoms, size_t size, void *data);
extern "Python" bool pyclingo_observer_output_atom(clingo_symbol_t symbol, clingo_atom_t atom, void *data);
extern "Python" bool pyclingo_observer_output_term(clingo_symbol_t symbol, clingo_literal_t const *condition, size_t size, void *data);
extern "Python" bool pyclingo_observer_output_csp(clingo_symbol_t symbol, int value, clingo_literal_t const *condition, size_t size, void *data);
extern "Python" bool pyclingo_observer_external(clingo_atom_t atom, clingo_external_type_t type, void *data);
extern "Python" bool pyclingo_observer_assume(clingo_literal_t const *literals, size_t size, void *data);
extern "Python" bool pyclingo_observer_heuristic(clingo_atom_t atom, clingo_heuristic_type_t type, int bias, unsigned priority, clingo_literal_t const *condition, size_t size, void *data);
extern "Python" bool pyclingo_observer_acyc_edge(int node_u, int node_v, clingo_literal_t const *condition, size_t size, void *data);
extern "Python" bool pyclingo_observer_theory_term_number(clingo_id_t term_id, int number, void *data);
extern "Python" bool pyclingo_observer_theory_term_string(clingo_id_t term_id, char const *name, void *data);
extern "Python" bool pyclingo_observer_theory_term_compound(clingo_id_t term_id, int name_id_or_type, clingo_id_t const *arguments, size_t size, void *data);
extern "Python" bool pyclingo_observer_theory_element(clingo_id_t element_id, clingo_id_t const *terms, size_t terms_size, clingo_literal_t const *condition, size_t condition_size, void *data);
extern "Python" bool pyclingo_observer_theory_atom(clingo_id_t atom_id_or_zero, clingo_id_t term_id, clingo_id_t const *elements, size_t size, void *data);
extern "Python" bool pyclingo_observer_theory_atom_with_guard(clingo_id_t atom_id_or_zero, clingo_id_t term_id, clingo_id_t const *elements, size_t size, clingo_id_t operator_id, clingo_id_t right_hand_side_id, void *data);
extern "Python" char const *pyclingo_application_program_name(void *data);
extern "Python" char const *pyclingo_application_version(void *data);
extern "Python" unsigned pyclingo_application_message_limit(void *data);
extern "Python" bool pyclingo_application_main(clingo_control_t *control, char const *const * files, size_t size, void *data);
extern "Python" void pyclingo_application_logger(clingo_warning_t code, char const *message, void *data);
extern "Python" bool pyclingo_application_print_model(clingo_model_t const *model, clingo_default_model_printer_t printer, void *printer_data, void *data);
extern "Python" bool pyclingo_application_register_options(clingo_options_t *options, void *data);
extern "Python" bool pyclingo_application_validate_options(void *data);
extern "Python" bool pyclingo_application_options_parse(char const *value, void *data);
extern "Python" bool pyclingo_ast_callback(clingo_ast_t const *, void *);
extern "Python" bool pyclingo_script_execute(clingo_location_t *loc, char const *code, void *data);
extern "Python" bool pyclingo_script_call(clingo_location_t *loc, char const *name, void *arguments, size_t size, void *symbol_callback, void *symbol_callback_data, void *data);
extern "Python" bool pyclingo_script_callable(char const * name, bool *ret, void *data);
extern "Python" bool pyclingo_script_main(clingo_control_t *ctl, void *data);
extern "Python" bool pyclingo_execute(void *loc, char const *code, void *data);
extern "Python" bool pyclingo_call(void *loc, char const *name, void *arguments, size_t size, void *symbol_callback, void *symbol_callback_data, void *data);
extern "Python" bool pyclingo_callable(char const * name, bool *ret, void *data);
extern "Python" bool pyclingo_main(void *ctl, void *data);
