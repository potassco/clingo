from typing import Any, List, Mapping, Tuple
from abc import ABCMeta




def Aggregate(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def AggregateGuard(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def BinaryOperation(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def BodyAggregate(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def BodyAggregateElement(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def BooleanConstant(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def CSPGuard(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def CSPLiteral(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def CSPProduct(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def CSPSum(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Comparison(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def ConditionalLiteral(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Defined(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Definition(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Disjoint(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def DisjointElement(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Disjunction(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Edge(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def External(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Function(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def HeadAggregate(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def HeadAggregateElement(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Heuristic(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Id(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Interval(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Literal(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Minimize(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Pool(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Program(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def ProjectAtom(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def ProjectSignature(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Rule(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Script(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def ShowSignature(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def ShowTerm(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Symbol(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def SymbolicAtom(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def TheoryAtom(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def TheoryAtomDefinition(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def TheoryAtomElement(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def TheoryDefinition(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def TheoryFunction(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def TheoryGuard(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def TheoryGuardDefinition(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def TheoryOperatorDefinition(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def TheorySequence(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def TheoryTermDefinition(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def TheoryUnparsedTerm(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def TheoryUnparsedTermElement(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def UnaryOperation(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...
def Variable(*args: List[Any], **kwargs: Mapping[str,Any]) -> Any: ...


class AST:
    def __init__(self, type: ASTType, **arguments: Mapping[str,Any]): ...
    def items(self) -> List[Tuple[str,AST]]: ...
    def keys(self) -> List[str]: ...
    def values(self) -> List[AST]: ...
    child_keys: List[str]
    type: ASTType

class ASTType(metaclass=ABCMeta):
    Aggregate: ASTType
    AggregateGuard: ASTType
    BinaryOperation: ASTType
    BodyAggregate: ASTType
    BodyAggregateElement: ASTType
    BooleanConstant: ASTType
    CSPGuard: ASTType
    CSPLiteral: ASTType
    CSPProduct: ASTType
    CSPSum: ASTType
    Comparison: ASTType
    ConditionalLiteral: ASTType
    Defined: ASTType
    Definition: ASTType
    Disjoint: ASTType
    DisjointElement: ASTType
    Disjunction: ASTType
    Edge: ASTType
    External: ASTType
    Function: ASTType
    HeadAggregate: ASTType
    HeadAggregateElement: ASTType
    Heuristic: ASTType
    Id: ASTType
    Interval: ASTType
    Literal: ASTType
    Minimize: ASTType
    Pool: ASTType
    Program: ASTType
    ProjectAtom: ASTType
    ProjectSignature: ASTType
    Rule: ASTType
    Script: ASTType
    ShowSignature: ASTType
    ShowTerm: ASTType
    Symbol: ASTType
    SymbolicAtom: ASTType
    TheoryAtom: ASTType
    TheoryAtomDefinition: ASTType
    TheoryAtomElement: ASTType
    TheoryDefinition: ASTType
    TheoryFunction: ASTType
    TheoryGuard: ASTType
    TheoryGuardDefinition: ASTType
    TheoryOperatorDefinition: ASTType
    TheorySequence: ASTType
    TheoryTermDefinition: ASTType
    TheoryUnparsedTerm: ASTType
    TheoryUnparsedTermElement: ASTType
    UnaryOperation: ASTType
    Variable: ASTType

class AggregateFunction(metaclass=ABCMeta):
    Count: AggregateFunction
    Max: AggregateFunction
    Min: AggregateFunction
    Sum: AggregateFunction
    SumPlus: AggregateFunction

class BinaryOperator(metaclass=ABCMeta):
    And: BinaryOperator
    Division: BinaryOperator
    Minus: BinaryOperator
    Modulo: BinaryOperator
    Multiplication: BinaryOperator
    Or: BinaryOperator
    Plus: BinaryOperator
    Power: BinaryOperator
    XOr: BinaryOperator

class ComparisonOperator(metaclass=ABCMeta):
    Equal: ComparisonOperator
    GreaterEqual: ComparisonOperator
    GreaterThan: ComparisonOperator
    LessEqual: ComparisonOperator
    LessThan: ComparisonOperator
    NotEqual: ComparisonOperator

class ScriptType(metaclass=ABCMeta):
    Lua: ScriptType
    Python: ScriptType

class Sign(metaclass=ABCMeta):
    DoubleNegation: Sign
    Negation: Sign
    NoSign: Sign

class TheoryAtomType(metaclass=ABCMeta):
    Any: TheoryAtomType
    Body: TheoryAtomType
    Directive: TheoryAtomType
    Head: TheoryAtomType

class TheoryOperatorType(metaclass=ABCMeta):
    BinaryLeft: TheoryOperatorType
    BinaryRight: TheoryOperatorType
    Unary: TheoryOperatorType

class TheorySequenceType(metaclass=ABCMeta):
    List: TheorySequenceType
    Set: TheorySequenceType
    Tuple: TheorySequenceType
    left_hand_side: str
    right_hand_side: str

class UnaryOperator(metaclass=ABCMeta):
    Absolute: UnaryOperator
    Minus: UnaryOperator
    Negation: UnaryOperator
    left_hand_side: str
    right_hand_side: str
