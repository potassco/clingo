// {{{ MIT License

// Copyright 2017 Roland Kaminski

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

// }}}

#define YYCTYPE     char
#define YYCURSOR    cursor()
#define YYLIMIT     limit()
#define YYMARKER    marker()
#define YYFILL(n)   {fill(n);}
#define YYCTXMARKER ctxmarker()
#define YYGETCONDITION condition
#define YYSETCONDITION condition

// Note: THEORYOP is also used in output/backends.cc
/*!re2c
    re2c:cond:goto = "continue;";

    DEC        = "0"|([1-9][0-9]*);
    HEX        = "0x"([0-9A-Fa-f]+);
    OCT        = "0o"([1-7]+);
    BIN        = "0b"([0-1]+);
    NUMBER     = DEC | HEX | OCT | BIN;
    ANY        = [\000-\377];
    WS         = [\t\r ]*;
    NL         = "\n";
    IDENTIFIER = [_']*[a-z]['A-Za-z0-9_]*;
    VARIABLE   = [_']*[A-Z]['A-Za-z0-9_]*;
    ANONYMOUS  = "_";
    STRING     = "\"" ([^\\"\n]|"\\\""|"\\\\"|"\\n")* "\"";
    WSNL       = [\t\r\n ]*;
    SIG        = WSNL ([-$])? WSNL IDENTIFIER WSNL "/" WSNL NUMBER WSNL ".";
    SCRIPT     = "#script";
    THEORYOP   = [/!<=>+\-*\\?&@|:;~\^\.]+;
    SUP        = "#sup"("remum")?;
    INF        = "#inf"("imum")?;
    KEYWORD    = "#" [a-zA-Z0-9_]*;
*/

int Gringo::Input::NonGroundParser::lex_impl(void *pValue, Location &loc) {
    int bc = 0;
    auto &value = *static_cast<Gringo::Input::NonGroundGrammar::parser::semantic_type*>(pValue);
    start(loc);
    for (;;) {
        /*!re2c
        <normal,theory,definition,script> WS         { start(loc); continue; }
        <normal,theory,definition,script> NL         { if(eof()) return 0; step(); start(loc); continue; }
        <normal,theory> INF                          { return NonGroundGrammar::parser::token::INFIMUM; }
        <normal,theory> SUP                          { return NonGroundGrammar::parser::token::SUPREMUM; }
        <normal> SCRIPT                              => script { return NonGroundGrammar::parser::token::SCRIPT; }
        <normal> "#include"                          { return NonGroundGrammar::parser::token::INCLUDE; }
        <normal> "#edge"                             { return NonGroundGrammar::parser::token::EDGE; }
        <normal> "#heuristic"                        { return NonGroundGrammar::parser::token::HEURISTIC; }
        <normal> "#project"                          { return NonGroundGrammar::parser::token::PROJECT; }
        <normal> "#show"                             { return NonGroundGrammar::parser::token::SHOW; }
        <normal> "#show"/SIG                         { return NonGroundGrammar::parser::token::SHOWSIG; }
        <normal> "#const"                            { return NonGroundGrammar::parser::token::CONST; }
        <normal> "#minimi"[zs]"e"                    { return NonGroundGrammar::parser::token::MINIMIZE; }
        <normal> "#maximi"[zs]"e"                    { return NonGroundGrammar::parser::token::MAXIMIZE; }
        <normal> "#program"                          { return NonGroundGrammar::parser::token::BLOCK; }
        <normal> "#external"                         { return NonGroundGrammar::parser::token::EXTERNAL; }
        <normal> "#defined"                          { return NonGroundGrammar::parser::token::DEFINED; }
        <definition> "left"                          { return NonGroundGrammar::parser::token::LEFT; }
        <definition> "right"                         { return NonGroundGrammar::parser::token::RIGHT; }
        <definition> "head"                          { return NonGroundGrammar::parser::token::HEAD; }
        <definition> "body"                          { return NonGroundGrammar::parser::token::BODY; }
        <definition> "any"                           { return NonGroundGrammar::parser::token::ANY; }
        <definition> "binary"                        { return NonGroundGrammar::parser::token::BINARY; }
        <definition> "unary"                         { return NonGroundGrammar::parser::token::UNARY; }
        <definition> "directive"                     { return NonGroundGrammar::parser::token::DIRECTIVE; }

        <normal,theory> "not"                        { value.str = String::toRep(not_); return NonGroundGrammar::parser::token::NOT; }
        <normal> "default"                           { value.str = String::toRep(string()); return NonGroundGrammar::parser::token::DEFAULT; }
        <normal> "override"                          { value.str = String::toRep(string()); return NonGroundGrammar::parser::token::OVERRIDE; }
        <normal> ANONYMOUS                           { return NonGroundGrammar::parser::token::ANONYMOUS; }
        <normal,theory,definition,script> IDENTIFIER { value.str = String::toRep(string()); return NonGroundGrammar::parser::token::IDENTIFIER; }
        <normal,theory,definition> NUMBER            { value.num = integer(); return NonGroundGrammar::parser::token::NUMBER; }
        <normal,theory> VARIABLE                     { value.str = String::toRep(string()); return NonGroundGrammar::parser::token::VARIABLE; }
        <normal,theory> STRING                       { value.str = String::toRep(unquote(string(1, 1)).c_str()); return NonGroundGrammar::parser::token::STRING; }

        <normal> "#true"                             { return NonGroundGrammar::parser::token::TRUE; }
        <normal> "#false"                            { return NonGroundGrammar::parser::token::FALSE; }
        <normal> "#sum"                              { return NonGroundGrammar::parser::token::SUM; }
        <normal> "#sum+"                             { return NonGroundGrammar::parser::token::SUMP; }
        <normal> "#count"                            { return NonGroundGrammar::parser::token::COUNT; }
        <normal> "#min"                              { return NonGroundGrammar::parser::token::MIN; }
        <normal> "#max"                              { return NonGroundGrammar::parser::token::MAX; }
        <normal> "#disjoint"                         { return NonGroundGrammar::parser::token::DISJOINT; }
        <normal> "#theory"                           { return NonGroundGrammar::parser::token::THEORY; }
        <normal,theory,definition> ";"               { return NonGroundGrammar::parser::token::SEM; }
        <normal> ".."                                { return NonGroundGrammar::parser::token::DOTS; }
        <normal,theory,definition> "."               { return NonGroundGrammar::parser::token::DOT; }
        <normal,theory,definition> ":"               { return NonGroundGrammar::parser::token::COLON; }
        <normal,theory> ":-"                         { return NonGroundGrammar::parser::token::IF; }
        <normal> ":~"                                { return NonGroundGrammar::parser::token::WIF; }
        <normal,theory,definition> ","               { return NonGroundGrammar::parser::token::COMMA; }
        <normal> "|"                                 { return NonGroundGrammar::parser::token::VBAR; }
        <normal,theory> "["                          { return NonGroundGrammar::parser::token::LBRACK; }
        <normal,theory> "]"                          { return NonGroundGrammar::parser::token::RBRACK; }
        <normal,theory,script> "("                   { return NonGroundGrammar::parser::token::LPAREN; }
        <normal,theory> ")"                          { return NonGroundGrammar::parser::token::RPAREN; }
        <script> ")" WS                              => script_body { start(loc); return NonGroundGrammar::parser::token::RPAREN; }
        <normal,theory,definition> "{"               { return NonGroundGrammar::parser::token::LBRACE; }
        <normal,theory,definition> "}"               { return NonGroundGrammar::parser::token::RBRACE; }
        <normal> "+"                                 { return NonGroundGrammar::parser::token::ADD; }
        <normal> "-"                                 { return NonGroundGrammar::parser::token::SUB; }
        <normal> "**"                                { return NonGroundGrammar::parser::token::POW; }
        <normal> "\\"                                { return NonGroundGrammar::parser::token::MOD; }
        <normal> "*"                                 { return NonGroundGrammar::parser::token::MUL; }
        <normal> ">"                                 { return NonGroundGrammar::parser::token::GT; }
        <normal> "<"                                 { return NonGroundGrammar::parser::token::LT; }
        <normal> ">="                                { return NonGroundGrammar::parser::token::GEQ; }
        <normal> "<="                                { return NonGroundGrammar::parser::token::LEQ; }
        <normal> "=="                                { return NonGroundGrammar::parser::token::EQ; }
        <normal> "!="                                { return NonGroundGrammar::parser::token::NEQ; }
        <normal> "<>"                                { return NonGroundGrammar::parser::token::NEQ; }
        <normal> "="                                 { return NonGroundGrammar::parser::token::EQ; }
        <normal,definition> "/"                      { return NonGroundGrammar::parser::token::SLASH; }
        <normal> "@"                                 { return NonGroundGrammar::parser::token::AT; }
        <normal,definition> "&"                      { return NonGroundGrammar::parser::token::AND; }
        <normal> "^"                                 { return NonGroundGrammar::parser::token::XOR; }
        <normal> "~"                                 { return NonGroundGrammar::parser::token::BNOT; }
        <normal> "?"                                 { return NonGroundGrammar::parser::token::QUESTION; }
        <normal> "$"                                 { return NonGroundGrammar::parser::token::CSP; }
        <normal> "$+"                                { return NonGroundGrammar::parser::token::CSP_ADD; }
        <normal> "$-"                                { return NonGroundGrammar::parser::token::CSP_SUB; }
        <normal> "$*"                                { return NonGroundGrammar::parser::token::CSP_MUL; }
        <normal> "$<="                               { return NonGroundGrammar::parser::token::CSP_LEQ; }
        <normal> "$<"                                { return NonGroundGrammar::parser::token::CSP_LT; }
        <normal> "$>="                               { return NonGroundGrammar::parser::token::CSP_GEQ; }
        <normal> "$>"                                { return NonGroundGrammar::parser::token::CSP_GT; }
        <normal> "$=="                               { return NonGroundGrammar::parser::token::CSP_EQ; }
        <normal> "$="                                { return NonGroundGrammar::parser::token::CSP_EQ; }
        <normal> "$!="                               { return NonGroundGrammar::parser::token::CSP_NEQ; }
        <normal> "$<>"                               { return NonGroundGrammar::parser::token::CSP_NEQ; }
        <theory> THEORYOP                            { value.str = String::toRep(string()); return NonGroundGrammar::parser::token::THEORY_OP; }
        <normal,theory,definition,script> "%*"       => blockcomment { bc++; continue; }
        <normal,theory,definition,script> "%"        :=> comment
        <normal,theory,definition,script> "#!"       :=> comment
        <normal,theory,definition,script> KEYWORD    { lexerError(end(loc), string()); continue; }
        <normal,theory,definition,script> ANY        { lexerError(end(loc), string()); continue; }

        <script_body> WS "#end" => normal {
            auto span = string();
            size_t size = span.size - 4;
            for (; size > 0; --size) {
                char c = span[size - 1];
                if (c != ' ' && c != '\t' && c != '\r') {
                    break;
                }
            }
            std::string s(span.first, span.first + size);
            value.str = String::toRep(s.c_str());
            return NonGroundGrammar::parser::token::CODE;
        }
        <script_body> NL {
            if(eof()) {
                lexerError(eof(loc), Potassco::toSpan("<EOF>", 5));
                return 0;
            }
            step();
            continue;
        }
        <script_body> ANY { continue; }

        <blockcomment> "*%" { if(--bc == 0) { condition(yycnormal); start(loc); } continue; }
        <blockcomment> "%*" { bc++; continue; }
        <blockcomment> "%"  :=> comment
        <blockcomment> NL   { if(eof()) { lexerError(eof(loc), Potassco::toSpan("<EOF>", 5)); return 0; } step(); continue; }
        <blockcomment> ANY  { continue; }

        <comment> NL {
            if(eof()) {
                if(bc > 0) { lexerError(eof(loc), Potassco::toSpan("<EOF>", 5)); }
                return 0;
            }
            step();
            if (bc > 0) { condition(yycblockcomment); }
            else {
                condition(yycnormal);
                start(loc);
            }
            continue;
        }
        <comment> ANY { continue; }
        */
    }
    assert(false);
    return 0;
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL
#undef YYCTXMARKER
#undef YYGETCONDITION
#undef YYSETCONDITION
